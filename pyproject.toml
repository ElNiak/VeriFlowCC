[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "verifflowcc"
dynamic = ["version"]
description = "VeriFlowCC - Agile V-Model development pipeline with Claude integration"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
authors = [{ name = "elniak", email = "elniak@example.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "typer[all]>=0.12.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
    "jinja2>=3.1.0",
    "claude-code-sdk>=0.0.20",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-xdist>=3.3.0",
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "pre-commit>=3.6.0",
    "types-pyyaml>=6.0.0",
]

[project.urls]
Documentation = "https://github.com/elniak/VeriFlowCC"
Issues = "https://github.com/elniak/VeriFlowCC/issues"
Source = "https://github.com/elniak/VeriFlowCC"

[project.scripts]
verifflowcc = "verifflowcc.cli:app"
vv = "verifflowcc.cli:app"

[tool.hatch.version]
path = "verifflowcc/__init__.py"

[tool.ruff]
line-length = 100
exclude = [".claude"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for cleaner exception handling
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S603", "S607", "S108"]  # Allow assertions, subprocess usage in tests
"tests/integration/*" = ["S603", "S607"]  # Allow subprocess in integration tests

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = false
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
exclude = [".claude"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = "-ra -v --cov=verifflowcc --cov-report=term-missing"
asyncio_mode = "auto"

# Markers for test categorization
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "e2e: marks tests as end-to-end tests (deselect with '-m \"not e2e\"')",
    "smoke: marks tests as smoke tests",
    "regression: marks tests as regression tests",
    "slow: marks tests as slow running",
    "planning: marks tests related to planning stage",
    "requirements: marks tests related to requirements stage",
    "design: marks tests related to design stage",
    "coding: marks tests related to coding stage",
    "testing: marks tests related to testing stage",
    "integration_stage: marks tests related to integration stage",
    "validation: marks tests related to validation stage",
    "critical: marks tests as critical priority",
    "high: marks tests as high priority",
    "medium: marks tests as medium priority",
    "low: marks tests as low priority",
]

[tool.coverage.run]
source = ["verifflowcc"]
omit = [
    "tests/*",
    "verifflowcc/__init__.py",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest-benchmark>=5.1.0",
]
